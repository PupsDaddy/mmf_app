from typing import Literal, Listfrom .base import Basefrom sqlalchemy import String, Float, ForeignKey, Booleanfrom sqlalchemy.dialects.postgresql import ENUMfrom sqlalchemy.orm import Mapped, mapped_column, relationshipclass Student(Base):    __tablename__ = 'Students'    id: Mapped[int] = mapped_column('id', primary_key=True, nullable=True)    stud_name: Mapped[str] = mapped_column('stud_name', String(40), nullable=False)    stud_father_name: Mapped[str] = mapped_column('stud_father_name', String(40), nullable=False)    stud_surname: Mapped[str] = mapped_column('stud_surname', String(40), nullable=False)    total_avg_score: Mapped[float] = mapped_column('total_avg_score', Float, nullable=True, default=None)    last_avg_score: Mapped[float] = mapped_column('last_avg_score', Float, nullable=True, default=None)    group_id: Mapped[int] = mapped_column('group_id', ForeignKey('Groups.id', ondelete='SET NULL'), nullable=True)    sub_group: Mapped[Literal['a', 'b', 'c']] = mapped_column('sub_group', ENUM('a', 'b', 'c', name='sub_groups'), nullable=False)    study_form: Mapped[Literal['paid', 'free']] = mapped_column('study_form', ENUM('paid', 'free', name='stud_name'), nullable=False)    is_active: Mapped[bool] = mapped_column('is_active', Boolean, nullable=False, default=True)    group: Mapped['Group'] = relationship('Group', back_populates='studs')    attendance: Mapped[List['Attendance']] = relationship('Attendance', back_populates='stud')    exams_session: Mapped[List['ExamSession']] = relationship('ExamSession', back_populates='stud')    zachets_session: Mapped[List['ZachetSession']] = relationship('ZachetSession', back_populates='stud')    def __repr__(self) -> str:        return (f"<Student(id='{self.id}', stud_name='{self.stud_name}', stud_father_name='{self.stud_father_name}',"                f" stud_surname='{self.stud_surname}', total_avg_score='{self.total_avg_score}', "                f"last_avg_score='{self.last_avg_score}', group_id='{self.group_id}', "                f"sub_group='{self.sub_group}', study_form='{self.study_form}', is_active='{self.is_active}')>")