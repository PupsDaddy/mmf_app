from fastapi import APIRouter, HTTPExceptionfrom backend.app.dependencies.database import SessionDepfrom backend.app.models.subjects_semester import SubjectSemester as SubjectSemesterORMfrom backend.app.models.syllabuses import Syllabus as SyllabusORMfrom backend.app.models.subjects import Subject as SubjectORMfrom backend.app.models.groups import Group as GroupORMfrom sqlalchemy import join, selectfrom backend.app.schemas.subjects_semester import SubjectSemesterCreate, SubjectSemester, SubjectSemesterFullfrom typing import Listrouter = APIRouter(tags=['subjects_semester'], prefix='/subjects_semester')@router.get('/{sub_semester_id}', response_model=SubjectSemester)def get_sub_semester_by_id(sub_semester_id:int, session: SessionDep):    res = session.get(SubjectSemesterORM, sub_semester_id)    if not res:        raise HTTPException(status_code=404, detail="Записи с таким id нет!")    return res@router.get('/', response_model=List[SubjectSemester])def get_all_sub_semester_by_id(session: SessionDep):    res = session.query(SubjectSemesterORM)    if not res:        raise HTTPException(status_code=404, detail="Записи с таким id нет!")    return res@router.post('/')def insert_sub_semester(sub_semester:SubjectSemesterCreate, session: SessionDep):    params_dict = sub_semester.model_dump()    new_sub_semester = SubjectSemesterORM(**params_dict)    session.add(new_sub_semester)    session.commit()    return {'status_code': 200, 'detail': 'created!'}@router.delete('/{sub_semester_id}')def insert_sub_semester(sub_semester_id:int, session: SessionDep):    sub_semester = session.get(SubjectSemesterORM, sub_semester_id)    if not sub_semester:        raise HTTPException(status_code=404, detail="Записи с таким id нет!")    session.delete(sub_semester)    session.commit()    return {'status_code': 200, 'detail': 'deleted!'}@router.get('/full_info', response_model=List[SubjectSemesterFull])def get_all_sub_semester_by_id(session: SessionDep):    res = select(SubjectSemesterORM.id, SubjectORM.sub_name, GroupORM.number)    # if not res:    #     raise HTTPException(status_code=404, detail="Записи с таким id нет!")    # return res