from fastapi import APIRouter, Depends, HTTPExceptionfrom fastapi.security import OAuth2PasswordRequestFormfrom backend.app.dependencies.database import SessionDeprouter = APIRouter(tags=['Пользователи'], prefix='/users')from backend.app.crud import get_user_by_loginfrom backend.app.auth.utils import validate_password, generate_token_pair, refresh_access_tokenfrom backend.app.schemas.users import UserIn@router.post("/login")async def login(session:SessionDep, form_data: UserIn):    user = get_user_by_login(session, form_data.login)    if not user or not validate_password(form_data.password, user.password):        raise HTTPException(status_code=400, detail="Неправильный логин или пароль")    tokens = generate_token_pair({"user_id": user.id, "role": user.role})    return {        "access_token": tokens["access_token"],        "refresh_token": tokens["refresh_token"],        "token_type": "bearer"    }@router.post("/refresh")async def refresh_token(refresh_token: str):    try:        new_access_token = refresh_access_token(refresh_token)        return {"access_token": new_access_token, "token_type": "bearer"}    except ValueError as e:        raise HTTPException(status_code=400, detail=str(e))