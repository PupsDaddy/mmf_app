from fastapi import APIRouterfrom backend.app.dependencies.database import SessionDepfrom backend.app.schemas.teachers_subjects_semester import TeacherSubjectSemester, TeacherSubjectSemesterCreatefrom typing import Listfrom backend.app.crud import get_teachers_subs_semester, update_teacher_id_in_TSS, insert_tss, get_tss_filtered, get_all_classes_info_by_teacher_id, delete_tssfrom typing import Unionfrom pydantic import BaseModelclass NewTeacherId(BaseModel):    new_teacher_id: Union[None,int]router = APIRouter(tags=['Преподаватели-предметы-семестр'], prefix='/teachers_subjects_semester')@router.get("/all", response_model=List[TeacherSubjectSemester])def get_all_teachers_subs_semester(session: SessionDep):    tss = get_teachers_subs_semester(session)    return tss# @router.get("/{curse}/{group}", response_model=List[TeacherSubjectSemester])# def get_all_teachers_subs_semester(session: SessionDep):#     res = session.query(tssORM).order_by(tssORM.id).all()#     if res:#         return res@router.patch('/{tss_id}')def update_teacher_id_in_tss(tss_id:int, session:SessionDep , new_teacher_id: NewTeacherId):    return update_teacher_id_in_TSS(session, tss_id, new_teacher_id)@router.post("/")def insert_new_tss(session:SessionDep, new_tss:TeacherSubjectSemesterCreate):    return insert_tss(session, new_tss)@router.get('/{curse}/{group_number}')def get_tss_filter(session:SessionDep, curse:int, group_number:int):    filtered_data = get_tss_filtered(session, curse, group_number)    return filtered_data@router.get('/{teacher_id}')def get_all_classes_info_by_teacher_id_(session:SessionDep, teacher_id:int):    return get_all_classes_info_by_teacher_id(session, teacher_id)@router.delete('/{id}')def delete_tss_by_id(session:SessionDep, id:int):    return delete_tss(session, id)