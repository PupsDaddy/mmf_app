from .base import  Basefrom sqlalchemy import Integer, String, ForeignKeyfrom sqlalchemy.orm import Mapped, mapped_column, relationshipfrom sqlalchemy.dialects.postgresql import ENUMfrom typing import Literal, Unionclass Attendance(Base):    __tablename__ = 'Attendance'    id: Mapped[int] = mapped_column('id', primary_key=True)    stud_id: Mapped[int] = mapped_column('stud_id', ForeignKey('Students.id', ondelete='CASCADE'))    class_id: Mapped[int] = mapped_column('class_id', ForeignKey('Classes.id', ondelete='SET NULL'))    is_attended: Mapped[Union[None, Literal['П', 'У', 'Н', 'В']]] = mapped_column('is_attended', ENUM('П', 'У', 'Н', 'В', name='is_attended'), nullable=True)    mark: Mapped[int] = mapped_column('mark', Integer,nullable=True)    teacher_comment: Mapped[str] = mapped_column('teacher_comment', String(300), nullable=True)    stud: Mapped['Student'] = relationship('Student', back_populates='attendance')    class_: Mapped['Class'] = relationship('Class', back_populates='attendance')    def __repr__(self):        return (f"<Attendance(id='{self.id}, stud_id='{self.stud_id}', class_id='{self.class_id}', "                f"is_attended='{self.is_attended}', mark='{self.mark}', teacher_comment='{self.teacher_comment}')>")