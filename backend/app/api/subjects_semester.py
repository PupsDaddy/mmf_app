from urllib.parse import unquotefrom fastapi import APIRouterfrom sqlalchemy.orm import joinedloadfrom backend.app.dependencies.database import SessionDepfrom backend.app.schemas.subjects import Subjectfrom backend.app.schemas.syllabuses import Syllabusfrom backend.app.models.subjects_semester import SubjectSemester as SubjectSemesterORMfrom backend.app.schemas.subjects_semester import SubjectSemesterCreate, SubjectSemesterfrom typing import Listrouter = APIRouter(tags=['Предметы-семестр'], prefix='/subjects_semester')@router.get('/all', response_model=List[SubjectSemester])def get_all_subjects_semester(session:SessionDep):    return session.query(SubjectSemesterORM).all()@router.get('/', response_model=List[SubjectSemester])def get_all_syllabuses_in(session:SessionDep, ids: str):    ids = [int(i) for i in unquote(ids).split(',')]    return session.query(SubjectSemesterORM).filter(SubjectSemesterORM.id.in_(ids)).all()@router.post('/')def insert_sub_semester(sub_semester:SubjectSemesterCreate, session: SessionDep):    params_dict = sub_semester.model_dump()    print(params_dict)    new_sub_semester = SubjectSemesterORM(**params_dict)    session.add(new_sub_semester)    session.flush()    session.commit()    return {'status_code': 200, 'detail': 'created!'}@router.get('/first_letters')def get_sub_sem_by_first_letters_sub(sub_name:str, session:SessionDep):    decoded_sub_name = unquote(sub_name).lower()    ss_list = session.query(SubjectSemesterORM).options(joinedload(SubjectSemesterORM.sub), joinedload(SubjectSemesterORM.syllabus)).all()    res =  [SubjectSemester.model_validate(ss_obj).model_dump()            | {'subject': Subject.model_validate(ss_obj.sub).model_dump()}            | {'syllabus' : Syllabus.model_validate(ss_obj.syllabus).model_dump()}            for ss_obj in ss_list if ss_obj.sub.sub_name.lower().startswith(decoded_sub_name)]    return res# @router.get('/first_letters', response_model=List[Subject])# def get_subjects(sub_name:str, session: SessionDep):#     decoded_sub_name = unquote(sub_name)#     subjects = session.query(SubjectORM).filter(func.lower(SubjectORM.sub_name).like(decoded_sub_name.lower() + '%'))#     return subjects