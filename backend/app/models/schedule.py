from .base import Basefrom sqlalchemy import Integer, ForeignKeyfrom sqlalchemy.orm import mapped_column, Mapped, relationshipfrom sqlalchemy.dialects.postgresql import TIMEfrom datetime import timefrom typing import Listclass Schedule(Base):    __tablename__ = 'Schedule'    id: Mapped[int] = mapped_column('id', primary_key=True, autoincrement=True)    n_week: Mapped[int] = mapped_column('n_week', Integer, nullable=False)    week_day: Mapped[int] = mapped_column('week_day', Integer, nullable=False)    n_class: Mapped[int] = mapped_column('n_class', Integer, nullable=False)    start_time: Mapped[time] = mapped_column('start_time', TIME, nullable=False)    end_time: Mapped[time] = mapped_column('end_time', TIME, nullable=False)    teacher_sub_semester_id: Mapped[int] = mapped_column('teacher_sub_semester_id', ForeignKey('TeachersSubjectsSemester.id', ondelete='SET NULL'), nullable=True)    class_room: Mapped[int] = mapped_column('class_room', Integer, nullable=False)    teacher_sub_semester: Mapped['TeacherSubjectSemester'] = relationship('TeacherSubjectSemester', back_populates='schedules')    def __repr__(self):        return (f"<Schedule(id='{self.id}', n_week='{self.n_week}', week_day='{self.week_day}', "                f"n_class='{self.n_class}', start_time='{self.start_time}',  end_time='{self.end_time}', "                f" teacher_sub_semester_id='{self.teacher_sub_semester_id}',  class_room='{self.class_room}')>")