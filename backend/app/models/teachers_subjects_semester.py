from .base import Basefrom sqlalchemy.orm import mapped_column, Mapped, relationshipfrom sqlalchemy.dialects.postgresql import ENUMfrom sqlalchemy import ForeignKeyfrom typing import Literal, Union, Listclass TeacherSubjectSemester(Base):    __tablename__ = 'TeachersSubjectsSemester'    id: Mapped[int] = mapped_column('id', primary_key=True)    sub_semester_id: Mapped[int] = mapped_column('sub_semester_id', ForeignKey('SubjectsSemester.id', ondelete='CASCADE'), nullable=False)    teacher_id: Mapped[int] = mapped_column('teacher_id', ForeignKey('Teachers.id', ondelete='SET NULL'), nullable=True)    group_id: Mapped[int] = mapped_column('group_id', ForeignKey('Groups.id', ondelete='SET NULL'), nullable=True)    class_type: Mapped[Literal['L', 'P']] = mapped_column('class_type', ENUM('L', 'P', name='class_type'), nullable=False)    sub_group: Mapped[Union[None, Literal['a', 'b', 'c']]] = mapped_column('sub_group', ENUM('a','b', 'c', name='sub_group'), nullable=True)    teacher: Mapped['Teacher'] = relationship('Teacher', back_populates='teachers_subjects_semester')    group: Mapped['Group'] = relationship('Group', back_populates='teachers_subjects_semester')    sub_semester: Mapped['SubjectSemester'] = relationship('SubjectSemester', back_populates='teachers_subjects_semester')    schedules: Mapped[List['Schedule']] = relationship('Schedule', back_populates='teacher_sub_semester')    exams: Mapped[List['Exam']] = relationship('Exam', back_populates='teacher_sub_semester')    zachets: Mapped[List['Zachet']] = relationship('Zachet', back_populates='teacher_sub_semester')    def __repr__(self) -> str:        return (f"<TeacherSubjectSemester(id='{self.id}', "                f"sub_semester_id='{self.sub_semester_id}', "                f"teacher_id='{self.teacher_id}', "                f"group_id='{self.group_id}'"                f"class_type='{self.class_type}', "                f"sub_group='{self.sub_group}')>")