from fastapi import APIRouter, Body, HTTPExceptionfrom sqlalchemy import and_, select, descfrom backend.app.dependencies.database import SessionDepfrom backend.app.models.teachers_subjects_semester import TeacherSubjectSemester as tssORMfrom backend.app.schemas.teachers_subjects_semester import TeacherSubjectSemester, TeacherSubjectSemesterCreatefrom typing import Listrouter = APIRouter(tags=['Преподаватели-предметы-семестр'], prefix='/teachers_subjects_semester')@router.get("/all", response_model=List[TeacherSubjectSemester])def get_all_teachers_subs_semester(session: SessionDep):    res = session.query(tssORM).all()    if res:        return res@router.patch('/{tss_id}')def update_teacher_id_in_tss(tss_id:int, session:SessionDep , new_teacher_id: int = Body(..., embed=True)):    tss_obj = session.get(tssORM, tss_id)    tss_obj.teacher_id = new_teacher_id    session.commit()    return {"OK": 200}@router.post("/")def insert_new_tss(session:SessionDep, new_tss:TeacherSubjectSemesterCreate):    new_id = session.execute(select(tssORM.id).order_by(desc(tssORM.id)).limit(1)).first()[0] + 1    dict_data = new_tss.model_dump()    res = session.query(tssORM).where(and_(tssORM.teacher_id == new_tss.teacher_id,                                     tssORM.group_id == new_tss.group_id, tssORM.sub_group == new_tss.sub_group,                                     tssORM.class_type == new_tss.class_type), tssORM.sub_semester_id == new_tss.sub_semester_id).all()    if res:        raise HTTPException(status_code=409, detail='Такая сущность уже существует!')    else:        new_obj = tssORM(id = new_id, **dict_data)        session.add(new_obj)        session.commit()        return {"OK": 200}