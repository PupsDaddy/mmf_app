import datetimefrom typing import Union, List, Any, Literalfrom fastapi import APIRouter, HTTPExceptionfrom pydantic import BaseModel, conintfrom backend.app.crud import all_attendance_data_for_tss, update_mark_or_attendance, insert_new_class_and_attendancefrom backend.app.crud import delete_attendance, delete_class, get_class_idfrom backend.app.dependencies.database import SessionDepfrom backend.app.schemas.classes import ClassCreaterouter = APIRouter(tags=['Посещаемость и пары'], prefix='/attendance_classes')@router.get('/{tss_id}/{sub_group}')def get_data_(session:SessionDep, tss_id:int, sub_group):    return all_attendance_data_for_tss(session,tss_id, sub_group)class UpdateMarkAttendance(BaseModel):    attendance_id_list: List[int]    new_mark_attendance_list: List[        Union[            Literal["П", "У", "Н", "В"],            conint(ge=0, le=10)        ]    ]@router.patch('/')def update_mark_or_attendance_(session:SessionDep, body:UpdateMarkAttendance):    return update_mark_or_attendance(session, body)class NewClassAttendance(BaseModel):    tss_id: int    class_date: datetime.date    students_id: List[int]@router.post('/')def insert_new_class_and_attendance_(session:SessionDep,  new_data:NewClassAttendance):    return insert_new_class_and_attendance(session, new_data)class DeleteParams(ClassCreate):    ...@router.delete('/')def delete_class_and_attendance(session:SessionDep, params:DeleteParams):    class_id = get_class_id(session, params.tss_id, params.class_date)    print(class_id)    if not class_id:        raise HTTPException(status_code=404, detail='Нет записи с такими полями')    delete_attendance(session, class_id)    delete_class(session, class_id)    return {'OK': 200}