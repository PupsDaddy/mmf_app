from .base import Basefrom sqlalchemy import Integer, Float, ForeignKey, Booleanfrom sqlalchemy.orm import mapped_column, Mapped, relationshipfrom typing import Listclass SubjectSemester(Base):    __tablename__ = 'SubjectsSemester'    id: Mapped[int] = mapped_column('id', primary_key=True)    sub_id: Mapped[int] = mapped_column('sub_id', ForeignKey('Subjects.id', ondelete='CASCADE'))    group_id: Mapped[int] = mapped_column('group_id', ForeignKey('Groups.id', ondelete='CASCADE'))    semester: Mapped[int] = mapped_column('semester', Integer)    has_exam: Mapped[bool] = mapped_column('has_exam', Boolean)    has_zachet: Mapped[bool] = mapped_column('has_zachet', Boolean)    has_sub_group: Mapped[bool] = mapped_column('has_sub_group', Boolean)    lecture_per_week: Mapped[float] = mapped_column('lecture_per_week', Float, nullable=False)    practice_per_week: Mapped[float] = mapped_column('practice_per_week', Float, nullable=False)    plan_id: Mapped[int] = mapped_column('plan_id', ForeignKey('Syllabuses.id', ondelete='CASCADE'), nullable=False)    syllabus: Mapped['Syllabus'] = relationship('Syllabus', back_populates='subjects_semester')    sub: Mapped['Subject'] = relationship('Subject', back_populates='subjects_semester')    group: Mapped['Group'] = relationship('Group', back_populates='subjects_semester')    teachers_subjects_semester: Mapped[List['TeacherSubjectSemester']] = relationship('TeacherSubjectSemester', back_populates='sub_semester')    def __repr__(self) -> str:        return (f"<SubjectSemester(id='{self.id}', sub_id='{self.sub_id}', group_id='{self.group_id}',"                f" semester='{self.semester}', has_exam='{self.has_exam}', "                f"has_zachet='{self.has_zachet}', has_sub_group='{self.has_sub_group}',"                f" lecture_per_week='{self.lecture_per_week}', practice_per_week='{self.practice_per_week}', plan_id='{self.plan_id}')>")