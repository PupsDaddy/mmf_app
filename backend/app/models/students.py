from typing import Literalfrom sqlalchemy import Integer, String, Float, ForeignKey, Booleanfrom sqlalchemy.dialects.postgresql import ENUMfrom .base import Basefrom sqlalchemy.orm import Mapped, mapped_column, relationshipclass Student(Base):    __tablename__ = 'Students'    id: Mapped[int] = mapped_column('id', primary_key=True)    stud_name: Mapped[str] = mapped_column('stud_name', String(40), nullable=False)    stud_father_name: Mapped[str] = mapped_column('stud_father_name', String(40), nullable=False)    stud_surname: Mapped[str] = mapped_column('stud_surname', String(40), nullable=False)    total_avg_score: Mapped[float] = mapped_column('total_avg_score', Float, nullable=True)    last_avg_score: Mapped[float] = mapped_column('last_avg_score', Float, nullable=True)    group_id: Mapped[int] = mapped_column('group_id', ForeignKey('Groups.group_id'))    sub_group: Mapped[Literal['a', 'b', 'c']] = mapped_column('sub_group', ENUM('a', 'b', 'c'), nullable=False)    study_form: Mapped[Literal['paid', 'free']] = mapped_column('study_form', ENUM('paid', 'free'), nullable=False)    is_active: Mapped[bool] = mapped_column('is_active', Boolean)    group: Mapped['Group'] = relationship('studs')    #sex    #scholarship not really essential